name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request: # all target branches

env:
  CARGO_TERM_COLOR: always

jobs:
  changes:
    name: Classify changes

    runs-on: ubuntu-latest

    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      java: ${{ steps.filter.outputs.java }}
      node: ${{ steps.filter.outputs.node }}
      swift: ${{ steps.filter.outputs.swift }}
      rust_ios: ${{ steps.filter.outputs.rust_ios }}

    steps:
    - uses: actions/checkout@v2

    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          all: &all
          - '.github/workflows/build_and_test.yml'
          - 'bin/**'
          - 'rust/*'
          - 'rust/!(bridge)/**'
          - 'rust/bridge/shared/**'
          - 'rust-toolchain'
          - 'Cargo.toml'
          - 'Cargo.lock'
          rust:
          - *all
          - '.clippy.toml'
          - '.rustfmt.license-template'
          - '.rustfmt.toml'
          - 'rust/**' # deliberately re-include the rust/bridge/ directories
          java:
          - *all
          - '.dockerignore'
          - 'java/**'
          - 'rust/bridge/jni/**'
          node:
          - *all
          - '.nvmrc'
          - '.prettierignore'
          - '.prettierrc'
          - 'binding.gyp'
          - 'node/**'
          - 'package.json'
          - 'rust/bridge/node/**'
          - 'yarn.lock'
          rust_ios: &rust_ios
          - *all
          - 'rust/bridge/ffi/**'
          swift:
          - *rust_ios
          - 'swift/**'
          - 'SignalClient.podspec'
          ignored:
          - 'LICENSE'
          - 'README.md'
          - 'SECURITY.md'
          - '.github/FUNDING.yml'
          - '.github/workflows/**'
          - '.gitignore'

    - name: Check pattern completeness
      run: echo "::error file=.github/workflows/build_and_test.yml::File not included in any filter" && false
      if: ${{ !contains(steps.filter.outputs.*, 'true') }}

  rust-stable:
    name: Rust stable

    runs-on: ubuntu-latest

    needs: changes

    if: ${{ needs.changes.outputs.rust == 'true' }}

    steps:
    - uses: actions/checkout@v2

    - run: sudo apt-get install gcc-multilib

    - name: Install Rust
      run: rustup +stable target add i686-unknown-linux-gnu

    - name: Build
      run: cargo +stable build --verbose

    - name: Run tests
      run: cargo +stable test --workspace --verbose -- --include-ignored

    - name: Run tests (32-bit)
      # Exclude device-transfer because OpenSSL, used for reference results,
      # doesn't support the --target option.
      # Exclude signal-neon-futures because those tests run Node
      run: cargo +stable test --workspace --verbose --target i686-unknown-linux-gnu --exclude device-transfer --exclude signal-neon-futures -- --include-ignored

    - name: Build benches
      run: cargo +stable build --workspace --benches --verbose

  rust-nightly:
    name: Rust nightly

    runs-on: ubuntu-latest

    needs: changes

    if: ${{ needs.changes.outputs.rust == 'true' }}

    steps:
    - uses: actions/checkout@v2

    - run: sudo apt-get install gcc-multilib

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        components: rustfmt, clippy
        target: i686-unknown-linux-gnu

    - name: Check for duplicate dependencies
      run: ./bin/verify_duplicate_crates

    - name: Rustfmt check
      run: cargo fmt --all -- --check

    - name: Check bridge versioning
      run: ./bin/verify_crate_versions.py

    - name: Build
      run: cargo build --all --verbose

    - name: Run tests
      run: cargo test --all --verbose -- -Z unstable-options --include-ignored

    - name: Run tests (32-bit)
      # Exclude device-transfer because OpenSSL, used for reference results,
      # doesn't support the --target option.
      # Exclude signal-neon-futures because those tests run Node
      run: cargo test --all --verbose --target i686-unknown-linux-gnu --exclude device-transfer --exclude signal-neon-futures -- -Z unstable-options --include-ignored

    - name: Build benches
      run: cargo build --benches --verbose

    - name: Clippy
      run: cargo clippy --workspace --all-targets -- -D warnings

    - name: Clippy (protocol fuzzing)
      run: cargo clippy --all-targets -- -D warnings
      working-directory: rust/protocol/fuzz
      env:
        RUSTFLAGS: --cfg fuzzing

  java:
    name: Java

    runs-on: ubuntu-latest

    needs: changes

    if: ${{ needs.changes.outputs.java == 'true' }}

    steps:
    - uses: actions/checkout@v2

    - name: Install NDK 21.0.6113669
      run: sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.0.6113669"

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal

    - name: Install Android toolchains
      run: rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android

    - name: Install NDK tool
      run: cargo install --version=1.0.0 cargo-ndk

    - name: Verify that the JNI bindings are up to date
      run: rust/bridge/jni/bin/gen_java_decl.py --verify

    - name: Build libsignal-client-java
      run: ./gradlew build
      working-directory: java
      env:
        ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk-bundle

    - run: java/check_code_size.py

  node:
    name: Node

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    needs: changes

    if: ${{ needs.changes.outputs.node == 'true' }}

    steps:
    - uses: actions/checkout@v2

    - name: Install nightly rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal

    - name: Get Node version from .nvmrc
      id: get-nvm-version
      shell: bash
      run: echo "::set-output name=node-version::$(cat .nvmrc)"

    - uses: actions/setup-node@v2
      with:
        node-version: ${{ steps.get-nvm-version.outputs.node-version }}

    - name: Verify that the Node bindings are up to date
      run: rust/bridge/node/bin/gen_ts_decl.py --verify
      if: matrix.os == 'ubuntu-latest'

    - run: yarn install

    - run: yarn tsc

    - run: yarn lint
      if: matrix.os == 'ubuntu-latest'

    - run: yarn format -c
      if: matrix.os == 'ubuntu-latest'

    - name: Run yarn test
      uses: GabrielBB/xvfb-action@v1.4
      with:
        # The tests use an Electron-based runner, so we need to set up a dummy display for them.
        run: yarn test

  swift_package:
    name: Swift Package

    runs-on: macOS-latest

    needs: changes

    if: ${{ needs.changes.outputs.swift == 'true' }}

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal

    - name: Build libsignal-ffi
      run: swift/build_ffi.sh -d -v --verify-ffi

    - name: Build Swift and run tests
      run: swift test -v --enable-code-coverage
      working-directory: swift

    - name: Run lint
      run: swiftlint lint --strict --reporter github-actions-logging
      working-directory: swift

    - name: Generate coverage report
      run: xcrun llvm-cov show --format=html --instr-profile .build/x86_64-apple-macosx/debug/codecov/default.profdata .build/x86_64-apple-macosx/debug/*.xctest/Contents/MacOS/* Sources --output-dir coverage-report
      working-directory: swift

    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: Coverage
        path: swift/coverage-report

    - name: Summarize coverage
      run: xcrun llvm-cov report --instr-profile .build/x86_64-apple-macosx/debug/codecov/default.profdata .build/x86_64-apple-macosx/debug/*.xctest/Contents/MacOS/* Sources
      working-directory: swift

  swift_cocoapod:
    name: Swift CocoaPod

    runs-on: macOS-latest

    needs: changes

    if: ${{ needs.changes.outputs.swift == 'true' }}

    steps:
      - uses: actions/checkout@v2

      - name: Check out SignalCoreKit
        uses: actions/checkout@v2
        with:
          repository: signalapp/SignalCoreKit
          path: SignalCoreKit

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Add iOS targets
        run: rustup target add x86_64-apple-ios aarch64-apple-ios

      - name: Install Xargo
        run: cargo install xargo

      - name: Add rust-src component
        run: rustup component add rust-src

      - name: Run pod lint
        # No import validation because it tries to build unsupported platforms (like 32-bit iOS).
        run: pod lib lint --verbose --platforms=ios --include-podspecs=SignalCoreKit/SignalCoreKit.podspec --skip-import-validation
        env:
          XCODE_XCCONFIG_FILE: swift/PodLibLint.xcconfig


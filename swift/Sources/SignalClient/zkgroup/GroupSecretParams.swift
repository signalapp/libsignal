//
// Copyright (C) 2020 Signal Messenger, LLC.
// All rights reserved.
//
// SPDX-License-Identifier: GPL-3.0-only
//
// Generated by zkgroup/codegen/codegen.py - do not edit

import Foundation
import SignalFfi

public class GroupSecretParams : ByteArray {

  public static let SIZE: Int = 289

  public static func generate() throws  -> GroupSecretParams {
    var randomness: [UInt8] = Array(repeating: 0, count: Int(32))
    let result = SecRandomCopyBytes(kSecRandomDefault, randomness.count, &randomness)
    guard result == errSecSuccess else {
      throw ZkGroupException.AssertionError
    }

    return try generate(randomness: randomness)
  }

  public static func generate(randomness: [UInt8]) throws  -> GroupSecretParams {
    var newContents: [UInt8] = Array(repeating: 0, count: GroupSecretParams.SIZE)

    let ffi_return = FFI_GroupSecretParams_generateDeterministic(randomness, UInt32(randomness.count), &newContents, UInt32(newContents.count))

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw ZkGroupException.ZkGroupError
    }

    do {
      return try GroupSecretParams(contents: newContents)
    } catch ZkGroupException.IllegalArgument {
      throw ZkGroupException.AssertionError
    } 
  }

  public static func deriveFromMasterKey(groupMasterKey: GroupMasterKey) throws  -> GroupSecretParams {
    var newContents: [UInt8] = Array(repeating: 0, count: GroupSecretParams.SIZE)

    let ffi_return = FFI_GroupSecretParams_deriveFromMasterKey(groupMasterKey.getInternalContentsForFFI(), UInt32(groupMasterKey.getInternalContentsForFFI().count), &newContents, UInt32(newContents.count))

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw ZkGroupException.ZkGroupError
    }

    do {
      return try GroupSecretParams(contents: newContents)
    } catch ZkGroupException.IllegalArgument {
      throw ZkGroupException.AssertionError
    } 
  }

  public init(contents: [UInt8]) throws  {
    try super.init(newContents: contents, expectedLength: GroupSecretParams.SIZE, unrecoverable: true)

    
    let ffi_return = FFI_GroupSecretParams_checkValidContents(self.contents, UInt32(self.contents.count))

    if (ffi_return == Native.FFI_RETURN_INPUT_ERROR) {
      throw ZkGroupException.IllegalArgument
    }

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw ZkGroupException.ZkGroupError
    }
  }

  public func getMasterKey() throws  -> GroupMasterKey {
    var newContents: [UInt8] = Array(repeating: 0, count: GroupMasterKey.SIZE)

    let ffi_return = FFI_GroupSecretParams_getMasterKey(self.contents, UInt32(self.contents.count), &newContents, UInt32(newContents.count))

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw ZkGroupException.ZkGroupError
    }

    do {
      return try GroupMasterKey(contents: newContents)
    } catch ZkGroupException.InvalidInput {
      throw ZkGroupException.AssertionError
    }

  }

  public func getPublicParams() throws  -> GroupPublicParams {
    var newContents: [UInt8] = Array(repeating: 0, count: GroupPublicParams.SIZE)

    let ffi_return = FFI_GroupSecretParams_getPublicParams(self.contents, UInt32(self.contents.count), &newContents, UInt32(newContents.count))

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw ZkGroupException.ZkGroupError
    }

    do {
      return try GroupPublicParams(contents: newContents)
    } catch ZkGroupException.InvalidInput {
      throw ZkGroupException.AssertionError
    }

  }

  public func serialize() -> [UInt8] {
    return contents
  }

}

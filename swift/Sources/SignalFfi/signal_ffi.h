/*
Copyright (C) 2020-2021 Signal Messenger, LLC.
SPDX-License-Identifier: AGPL-3.0-only
*/


#ifndef SIGNAL_FFI_H_
#define SIGNAL_FFI_H_

/* This file was automatically generated by cbindgen */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum {
  SignalCiphertextMessageType_Whisper = 2,
  SignalCiphertextMessageType_PreKey = 3,
  SignalCiphertextMessageType_SenderKey = 7,
} SignalCiphertextMessageType;

typedef enum {
  SignalContentHint_Default = 0,
  SignalContentHint_Supplementary = 1,
  SignalContentHint_Retry = 2,
} SignalContentHint;

typedef enum {
  SignalDirection_Sending = 0,
  SignalDirection_Receiving = 1,
} SignalDirection;

typedef enum {
  SignalLogLevel_Error = 1,
  SignalLogLevel_Warn,
  SignalLogLevel_Info,
  SignalLogLevel_Debug,
  SignalLogLevel_Trace,
} SignalLogLevel;

typedef enum {
  SignalErrorCode_UnknownError = 1,
  SignalErrorCode_InvalidState = 2,
  SignalErrorCode_InternalError = 3,
  SignalErrorCode_NullParameter = 4,
  SignalErrorCode_InvalidArgument = 5,
  SignalErrorCode_InvalidType = 6,
  SignalErrorCode_InvalidUtf8String = 7,
  SignalErrorCode_InsufficientOutputSize = 8,
  SignalErrorCode_ProtobufError = 10,
  SignalErrorCode_InvalidCiphertext = 20,
  SignalErrorCode_LegacyCiphertextVersion = 21,
  SignalErrorCode_UnknownCiphertextVersion = 22,
  SignalErrorCode_UnrecognizedMessageVersion = 23,
  SignalErrorCode_InvalidMessage = 30,
  SignalErrorCode_SealedSenderSelfSend = 31,
  SignalErrorCode_InvalidKey = 40,
  SignalErrorCode_InvalidSignature = 41,
  SignalErrorCode_FingerprintIdentifierMismatch = 50,
  SignalErrorCode_FingerprintVersionMismatch = 51,
  SignalErrorCode_FingerprintParsingError = 52,
  SignalErrorCode_UntrustedIdentity = 60,
  SignalErrorCode_InvalidKeyIdentifier = 70,
  SignalErrorCode_SessionNotFound = 80,
  SignalErrorCode_DuplicatedMessage = 90,
  SignalErrorCode_CallbackError = 100,
} SignalErrorCode;

typedef struct SignalAes256Ctr32 SignalAes256Ctr32;

typedef struct SignalAes256GcmDecryption SignalAes256GcmDecryption;

typedef struct SignalAes256GcmEncryption SignalAes256GcmEncryption;

typedef struct SignalAes256GcmSiv SignalAes256GcmSiv;

typedef struct SignalCiphertextMessage SignalCiphertextMessage;

typedef struct SignalFingerprint SignalFingerprint;

typedef struct SignalPreKeyBundle SignalPreKeyBundle;

typedef struct SignalPreKeyRecord SignalPreKeyRecord;

typedef struct SignalPreKeySignalMessage SignalPreKeySignalMessage;

typedef struct SignalPrivateKey SignalPrivateKey;

typedef struct SignalProtocolAddress SignalProtocolAddress;

typedef struct SignalPublicKey SignalPublicKey;

typedef struct SignalSenderCertificate SignalSenderCertificate;

typedef struct SignalSenderKeyDistributionMessage SignalSenderKeyDistributionMessage;

typedef struct SignalSenderKeyMessage SignalSenderKeyMessage;

typedef struct SignalSenderKeyRecord SignalSenderKeyRecord;

typedef struct SignalServerCertificate SignalServerCertificate;

typedef struct SignalSessionRecord SignalSessionRecord;

/**
 * The top-level error type (opaquely) returned to C clients when something goes wrong.
 */
typedef struct SignalFfiError SignalFfiError;

typedef struct SignalMessage SignalMessage;

typedef struct SignalSignedPreKeyRecord SignalSignedPreKeyRecord;

typedef struct SignalUnidentifiedSenderMessageContent SignalUnidentifiedSenderMessageContent;

typedef int (*SignalLoadSession)(void *store_ctx, SignalSessionRecord **recordp, const SignalProtocolAddress *address, void *ctx);

typedef int (*SignalStoreSession)(void *store_ctx, const SignalProtocolAddress *address, const SignalSessionRecord *record, void *ctx);

typedef struct {
  void *ctx;
  SignalLoadSession load_session;
  SignalStoreSession store_session;
} SignalSessionStore;

typedef int (*SignalGetIdentityKeyPair)(void *store_ctx, SignalPrivateKey **keyp, void *ctx);

typedef int (*SignalGetLocalRegistrationId)(void *store_ctx, uint32_t *idp, void *ctx);

typedef int (*SignalSaveIdentityKey)(void *store_ctx, const SignalProtocolAddress *address, const SignalPublicKey *public_key, void *ctx);

typedef int (*SignalGetIdentityKey)(void *store_ctx, SignalPublicKey **public_keyp, const SignalProtocolAddress *address, void *ctx);

typedef int (*SignalIsTrustedIdentity)(void *store_ctx, const SignalProtocolAddress *address, const SignalPublicKey *public_key, unsigned int direction, void *ctx);

typedef struct {
  void *ctx;
  SignalGetIdentityKeyPair get_identity_key_pair;
  SignalGetLocalRegistrationId get_local_registration_id;
  SignalSaveIdentityKey save_identity;
  SignalGetIdentityKey get_identity;
  SignalIsTrustedIdentity is_trusted_identity;
} SignalIdentityKeyStore;

typedef int (*SignalLoadPreKey)(void *store_ctx, SignalPreKeyRecord **recordp, uint32_t id, void *ctx);

typedef int (*SignalStorePreKey)(void *store_ctx, uint32_t id, const SignalPreKeyRecord *record, void *ctx);

typedef int (*SignalRemovePreKey)(void *store_ctx, uint32_t id, void *ctx);

typedef struct {
  void *ctx;
  SignalLoadPreKey load_pre_key;
  SignalStorePreKey store_pre_key;
  SignalRemovePreKey remove_pre_key;
} SignalPreKeyStore;

typedef int (*SignalLoadSignedPreKey)(void *store_ctx, SignalSignedPreKeyRecord **recordp, uint32_t id, void *ctx);

typedef int (*SignalStoreSignedPreKey)(void *store_ctx, uint32_t id, const SignalSignedPreKeyRecord *record, void *ctx);

typedef struct {
  void *ctx;
  SignalLoadSignedPreKey load_signed_pre_key;
  SignalStoreSignedPreKey store_signed_pre_key;
} SignalSignedPreKeyStore;

typedef bool (*SignalLogEnabledCallback)(const char *target, SignalLogLevel level);

typedef void (*SignalLogCallback)(const char *target, SignalLogLevel level, const char *file, uint32_t line, const char *message);

typedef void (*SignalLogFlushCallback)(void);

typedef struct {
  SignalLogEnabledCallback enabled;
  SignalLogCallback log;
  SignalLogFlushCallback flush;
} SignalFfiLogger;

typedef int (*SignalLoadSenderKey)(void *store_ctx, SignalSenderKeyRecord**, const SignalProtocolAddress*, const uint8_t (*distribution_id)[16], void *ctx);

typedef int (*SignalStoreSenderKey)(void *store_ctx, const SignalProtocolAddress*, const uint8_t (*distribution_id)[16], const SignalSenderKeyRecord*, void *ctx);

typedef struct {
  void *ctx;
  SignalLoadSenderKey load_sender_key;
  SignalStoreSenderKey store_sender_key;
} SignalSenderKeyStore;

void signal_print_ptr(const void *p);

void signal_free_string(const char *buf);

void signal_free_buffer(const unsigned char *buf, size_t buf_len);

SignalFfiError *signal_error_get_message(const SignalFfiError *err, const char **out);

uint32_t signal_error_get_type(const SignalFfiError *err);

void signal_error_free(SignalFfiError *err);

SignalFfiError *signal_identitykeypair_deserialize(SignalPrivateKey **private_key,
                                                   SignalPublicKey **public_key,
                                                   const unsigned char *input,
                                                   size_t input_len);

SignalFfiError *signal_sealed_session_cipher_decrypt(const unsigned char **out,
                                                     size_t *out_len,
                                                     const char **sender_e164,
                                                     const char **sender_uuid,
                                                     uint32_t *sender_device_id,
                                                     const unsigned char *ctext,
                                                     size_t ctext_len,
                                                     const SignalPublicKey *trust_root,
                                                     uint64_t timestamp,
                                                     const char *local_e164,
                                                     const char *local_uuid,
                                                     unsigned int local_device_id,
                                                     const SignalSessionStore *session_store,
                                                     const SignalIdentityKeyStore *identity_store,
                                                     const SignalPreKeyStore *prekey_store,
                                                     const SignalSignedPreKeyStore *signed_prekey_store,
                                                     void *ctx);

void signal_init_logger(SignalLogLevel max_level, SignalFfiLogger logger);

SignalFfiError *signal_aes256_gcm_siv_destroy(SignalAes256GcmSiv *p);

SignalFfiError *signal_aes256_ctr32_destroy(SignalAes256Ctr32 *p);

SignalFfiError *signal_aes256_ctr32_clone(SignalAes256Ctr32 **new_obj,
                                          const SignalAes256Ctr32 *obj);

SignalFfiError *signal_aes256_gcm_encryption_destroy(SignalAes256GcmEncryption *p);

SignalFfiError *signal_aes256_gcm_encryption_clone(SignalAes256GcmEncryption **new_obj,
                                                   const SignalAes256GcmEncryption *obj);

SignalFfiError *signal_aes256_gcm_decryption_destroy(SignalAes256GcmDecryption *p);

SignalFfiError *signal_aes256_gcm_decryption_clone(SignalAes256GcmDecryption **new_obj,
                                                   const SignalAes256GcmDecryption *obj);

SignalFfiError *signal_aes256_ctr32_new(SignalAes256Ctr32 **out,
                                        const unsigned char *key,
                                        size_t key_len,
                                        const unsigned char *nonce,
                                        size_t nonce_len,
                                        uint32_t initial_ctr);

SignalFfiError *signal_aes256_ctr32_process(SignalAes256Ctr32 *ctr,
                                            unsigned char *data,
                                            size_t data_len,
                                            uint32_t offset,
                                            uint32_t length);

SignalFfiError *signal_aes256_gcm_encryption_new(SignalAes256GcmEncryption **out,
                                                 const unsigned char *key,
                                                 size_t key_len,
                                                 const unsigned char *nonce,
                                                 size_t nonce_len,
                                                 const unsigned char *associated_data,
                                                 size_t associated_data_len);

SignalFfiError *signal_aes256_gcm_encryption_update(SignalAes256GcmEncryption *gcm,
                                                    unsigned char *data,
                                                    size_t data_len,
                                                    uint32_t offset,
                                                    uint32_t length);

SignalFfiError *signal_aes256_gcm_encryption_compute_tag(const unsigned char **out,
                                                         size_t *out_len,
                                                         SignalAes256GcmEncryption *gcm);

SignalFfiError *signal_aes256_gcm_decryption_new(SignalAes256GcmDecryption **out,
                                                 const unsigned char *key,
                                                 size_t key_len,
                                                 const unsigned char *nonce,
                                                 size_t nonce_len,
                                                 const unsigned char *associated_data,
                                                 size_t associated_data_len);

SignalFfiError *signal_aes256_gcm_decryption_update(SignalAes256GcmDecryption *gcm,
                                                    unsigned char *data,
                                                    size_t data_len,
                                                    uint32_t offset,
                                                    uint32_t length);

SignalFfiError *signal_aes256_gcm_decryption_verify_tag(bool *out,
                                                        SignalAes256GcmDecryption *gcm,
                                                        const unsigned char *tag,
                                                        size_t tag_len);

SignalFfiError *signal_aes256_gcm_siv_new(SignalAes256GcmSiv **out,
                                          const unsigned char *key,
                                          size_t key_len);

SignalFfiError *signal_aes256_gcm_siv_encrypt(const unsigned char **out,
                                              size_t *out_len,
                                              const SignalAes256GcmSiv *aes_gcm_siv,
                                              const unsigned char *ptext,
                                              size_t ptext_len,
                                              const unsigned char *nonce,
                                              size_t nonce_len,
                                              const unsigned char *associated_data,
                                              size_t associated_data_len);

SignalFfiError *signal_aes256_gcm_siv_decrypt(const unsigned char **out,
                                              size_t *out_len,
                                              const SignalAes256GcmSiv *aes_gcm_siv,
                                              const unsigned char *ctext,
                                              size_t ctext_len,
                                              const unsigned char *nonce,
                                              size_t nonce_len,
                                              const unsigned char *associated_data,
                                              size_t associated_data_len);

SignalFfiError *signal_ciphertext_message_destroy(SignalCiphertextMessage *p);

SignalFfiError *signal_fingerprint_destroy(SignalFingerprint *p);

SignalFfiError *signal_fingerprint_clone(SignalFingerprint **new_obj, const SignalFingerprint *obj);

SignalFfiError *signal_pre_key_bundle_destroy(SignalPreKeyBundle *p);

SignalFfiError *signal_pre_key_bundle_clone(SignalPreKeyBundle **new_obj,
                                            const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_record_destroy(SignalPreKeyRecord *p);

SignalFfiError *signal_pre_key_record_clone(SignalPreKeyRecord **new_obj,
                                            const SignalPreKeyRecord *obj);

SignalFfiError *signal_pre_key_signal_message_destroy(SignalPreKeySignalMessage *p);

SignalFfiError *signal_pre_key_signal_message_clone(SignalPreKeySignalMessage **new_obj,
                                                    const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_privatekey_destroy(SignalPrivateKey *p);

SignalFfiError *signal_privatekey_clone(SignalPrivateKey **new_obj, const SignalPrivateKey *obj);

SignalFfiError *signal_address_destroy(SignalProtocolAddress *p);

SignalFfiError *signal_address_clone(SignalProtocolAddress **new_obj,
                                     const SignalProtocolAddress *obj);

SignalFfiError *signal_publickey_destroy(SignalPublicKey *p);

SignalFfiError *signal_publickey_clone(SignalPublicKey **new_obj, const SignalPublicKey *obj);

SignalFfiError *signal_sender_certificate_destroy(SignalSenderCertificate *p);

SignalFfiError *signal_sender_certificate_clone(SignalSenderCertificate **new_obj,
                                                const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_key_distribution_message_destroy(SignalSenderKeyDistributionMessage *p);

SignalFfiError *signal_sender_key_distribution_message_clone(SignalSenderKeyDistributionMessage **new_obj,
                                                             const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_message_destroy(SignalSenderKeyMessage *p);

SignalFfiError *signal_sender_key_message_clone(SignalSenderKeyMessage **new_obj,
                                                const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_record_destroy(SignalSenderKeyRecord *p);

SignalFfiError *signal_sender_key_record_clone(SignalSenderKeyRecord **new_obj,
                                               const SignalSenderKeyRecord *obj);

SignalFfiError *signal_server_certificate_destroy(SignalServerCertificate *p);

SignalFfiError *signal_server_certificate_clone(SignalServerCertificate **new_obj,
                                                const SignalServerCertificate *obj);

SignalFfiError *signal_session_record_destroy(SignalSessionRecord *p);

SignalFfiError *signal_session_record_clone(SignalSessionRecord **new_obj,
                                            const SignalSessionRecord *obj);

SignalFfiError *signal_message_destroy(SignalMessage *p);

SignalFfiError *signal_message_clone(SignalMessage **new_obj, const SignalMessage *obj);

SignalFfiError *signal_signed_pre_key_record_destroy(SignalSignedPreKeyRecord *p);

SignalFfiError *signal_signed_pre_key_record_clone(SignalSignedPreKeyRecord **new_obj,
                                                   const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_unidentified_sender_message_content_destroy(SignalUnidentifiedSenderMessageContent *p);

SignalFfiError *signal_hkdf_derive(unsigned char *output,
                                   size_t output_len,
                                   uint32_t version,
                                   const unsigned char *ikm,
                                   size_t ikm_len,
                                   const unsigned char *label,
                                   size_t label_len,
                                   const unsigned char *salt,
                                   size_t salt_len);

SignalFfiError *signal_address_new(SignalProtocolAddress **out,
                                   const char *name,
                                   uint32_t device_id);

SignalFfiError *signal_publickey_deserialize(SignalPublicKey **p,
                                             const unsigned char *data,
                                             size_t data_len);

SignalFfiError *signal_publickey_serialize(const unsigned char **out,
                                           size_t *out_len,
                                           const SignalPublicKey *obj);

SignalFfiError *signal_publickey_get_public_key_bytes(const unsigned char **out,
                                                      size_t *out_len,
                                                      const SignalPublicKey *obj);

SignalFfiError *signal_address_get_device_id(uint32_t *out, const SignalProtocolAddress *obj);

SignalFfiError *signal_address_get_name(const char **out, const SignalProtocolAddress *obj);

SignalFfiError *signal_publickey_compare(int32_t *out,
                                         const SignalPublicKey *key1,
                                         const SignalPublicKey *key2);

SignalFfiError *signal_publickey_verify(bool *out,
                                        const SignalPublicKey *key,
                                        const unsigned char *message,
                                        size_t message_len,
                                        const unsigned char *signature,
                                        size_t signature_len);

SignalFfiError *signal_privatekey_deserialize(SignalPrivateKey **p,
                                              const unsigned char *data,
                                              size_t data_len);

SignalFfiError *signal_privatekey_serialize(const unsigned char **out,
                                            size_t *out_len,
                                            const SignalPrivateKey *obj);

SignalFfiError *signal_privatekey_generate(SignalPrivateKey **out);

SignalFfiError *signal_privatekey_get_public_key(SignalPublicKey **out, const SignalPrivateKey *k);

SignalFfiError *signal_privatekey_sign(const unsigned char **out,
                                       size_t *out_len,
                                       const SignalPrivateKey *key,
                                       const unsigned char *message,
                                       size_t message_len);

SignalFfiError *signal_privatekey_agree(const unsigned char **out,
                                        size_t *out_len,
                                        const SignalPrivateKey *private_key,
                                        const SignalPublicKey *public_key);

SignalFfiError *signal_identitykeypair_serialize(const unsigned char **out,
                                                 size_t *out_len,
                                                 const SignalPublicKey *public_key,
                                                 const SignalPrivateKey *private_key);

SignalFfiError *signal_fingerprint_new(SignalFingerprint **out,
                                       uint32_t iterations,
                                       uint32_t version,
                                       const unsigned char *local_identifier,
                                       size_t local_identifier_len,
                                       const SignalPublicKey *local_key,
                                       const unsigned char *remote_identifier,
                                       size_t remote_identifier_len,
                                       const SignalPublicKey *remote_key);

SignalFfiError *signal_fingerprint_scannable_encoding(const unsigned char **out,
                                                      size_t *out_len,
                                                      const SignalFingerprint *obj);

SignalFfiError *signal_fingerprint_display_string(const char **out, const SignalFingerprint *obj);

SignalFfiError *signal_fingerprint_compare(bool *out,
                                           const unsigned char *fprint1,
                                           size_t fprint1_len,
                                           const unsigned char *fprint2,
                                           size_t fprint2_len);

SignalFfiError *signal_message_deserialize(SignalMessage **p,
                                           const unsigned char *data,
                                           size_t data_len);

SignalFfiError *signal_message_get_body(const unsigned char **out,
                                        size_t *out_len,
                                        const SignalMessage *obj);

SignalFfiError *signal_message_get_serialized(const unsigned char **out,
                                              size_t *out_len,
                                              const SignalMessage *obj);

SignalFfiError *signal_message_get_counter(uint32_t *out, const SignalMessage *obj);

SignalFfiError *signal_message_get_message_version(uint32_t *out, const SignalMessage *obj);

SignalFfiError *signal_message_new(SignalMessage **out,
                                   uint8_t message_version,
                                   const unsigned char *mac_key,
                                   size_t mac_key_len,
                                   const SignalPublicKey *sender_ratchet_key,
                                   uint32_t counter,
                                   uint32_t previous_counter,
                                   const unsigned char *ciphertext,
                                   size_t ciphertext_len,
                                   const SignalPublicKey *sender_identity_key,
                                   const SignalPublicKey *receiver_identity_key);

SignalFfiError *signal_message_verify_mac(bool *out,
                                          const SignalMessage *msg,
                                          const SignalPublicKey *sender_identity_key,
                                          const SignalPublicKey *receiver_identity_key,
                                          const unsigned char *mac_key,
                                          size_t mac_key_len);

SignalFfiError *signal_message_get_sender_ratchet_key(SignalPublicKey **out,
                                                      const SignalMessage *m);

SignalFfiError *signal_pre_key_signal_message_new(SignalPreKeySignalMessage **out,
                                                  uint8_t message_version,
                                                  uint32_t registration_id,
                                                  uint32_t pre_key_id,
                                                  uint32_t signed_pre_key_id,
                                                  const SignalPublicKey *base_key,
                                                  const SignalPublicKey *identity_key,
                                                  const SignalMessage *signal_message);

SignalFfiError *signal_pre_key_signal_message_get_base_key(SignalPublicKey **out,
                                                           const SignalPreKeySignalMessage *m);

SignalFfiError *signal_pre_key_signal_message_get_identity_key(SignalPublicKey **out,
                                                               const SignalPreKeySignalMessage *m);

SignalFfiError *signal_pre_key_signal_message_get_signal_message(SignalMessage **out,
                                                                 const SignalPreKeySignalMessage *m);

SignalFfiError *signal_pre_key_signal_message_deserialize(SignalPreKeySignalMessage **p,
                                                          const unsigned char *data,
                                                          size_t data_len);

SignalFfiError *signal_pre_key_signal_message_serialize(const unsigned char **out,
                                                        size_t *out_len,
                                                        const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_pre_key_signal_message_get_registration_id(uint32_t *out,
                                                                  const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_pre_key_signal_message_get_signed_pre_key_id(uint32_t *out,
                                                                    const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_pre_key_signal_message_get_pre_key_id(uint32_t *out,
                                                             const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_pre_key_signal_message_get_version(uint32_t *out,
                                                          const SignalPreKeySignalMessage *obj);

SignalFfiError *signal_sender_key_message_deserialize(SignalSenderKeyMessage **p,
                                                      const unsigned char *data,
                                                      size_t data_len);

SignalFfiError *signal_sender_key_message_get_cipher_text(const unsigned char **out,
                                                          size_t *out_len,
                                                          const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_message_serialize(const unsigned char **out,
                                                    size_t *out_len,
                                                    const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_message_get_chain_id(uint32_t *out,
                                                       const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_message_get_iteration(uint32_t *out,
                                                        const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_message_get_distribution_id(uint8_t (*out)[16],
                                                              const SignalSenderKeyMessage *obj);

SignalFfiError *signal_sender_key_message_new(SignalSenderKeyMessage **out,
                                              uint8_t message_version,
                                              const uint8_t (*distribution_id)[16],
                                              uint32_t chain_id,
                                              uint32_t iteration,
                                              const unsigned char *ciphertext,
                                              size_t ciphertext_len,
                                              const SignalPrivateKey *pk);

SignalFfiError *signal_sender_key_message_verify_signature(bool *out,
                                                           const SignalSenderKeyMessage *skm,
                                                           const SignalPublicKey *pubkey);

SignalFfiError *signal_sender_key_distribution_message_deserialize(SignalSenderKeyDistributionMessage **p,
                                                                   const unsigned char *data,
                                                                   size_t data_len);

SignalFfiError *signal_sender_key_distribution_message_get_chain_key(const unsigned char **out,
                                                                     size_t *out_len,
                                                                     const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_distribution_message_serialize(const unsigned char **out,
                                                                 size_t *out_len,
                                                                 const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_distribution_message_get_chain_id(uint32_t *out,
                                                                    const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_distribution_message_get_iteration(uint32_t *out,
                                                                     const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_distribution_message_get_distribution_id(uint8_t (*out)[16],
                                                                           const SignalSenderKeyDistributionMessage *obj);

SignalFfiError *signal_sender_key_distribution_message_new(SignalSenderKeyDistributionMessage **out,
                                                           uint8_t message_version,
                                                           const uint8_t (*distribution_id)[16],
                                                           uint32_t chain_id,
                                                           uint32_t iteration,
                                                           const unsigned char *chainkey,
                                                           size_t chainkey_len,
                                                           const SignalPublicKey *pk);

SignalFfiError *signal_sender_key_distribution_message_get_signature_key(SignalPublicKey **out,
                                                                         const SignalSenderKeyDistributionMessage *m);

SignalFfiError *signal_pre_key_bundle_new(SignalPreKeyBundle **out,
                                          uint32_t registration_id,
                                          uint32_t device_id,
                                          uint32_t prekey_id,
                                          const SignalPublicKey *prekey,
                                          uint32_t signed_prekey_id,
                                          const SignalPublicKey *signed_prekey,
                                          const unsigned char *signed_prekey_signature,
                                          size_t signed_prekey_signature_len,
                                          const SignalPublicKey *identity_key);

SignalFfiError *signal_pre_key_bundle_get_identity_key(SignalPublicKey **out,
                                                       const SignalPreKeyBundle *p);

SignalFfiError *signal_pre_key_bundle_get_signed_pre_key_signature(const unsigned char **out,
                                                                   size_t *out_len,
                                                                   const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_registration_id(uint32_t *out,
                                                          const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_device_id(uint32_t *out, const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_signed_pre_key_id(uint32_t *out,
                                                            const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_pre_key_id(uint32_t *out, const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_pre_key_public(SignalPublicKey **out,
                                                         const SignalPreKeyBundle *obj);

SignalFfiError *signal_pre_key_bundle_get_signed_pre_key_public(SignalPublicKey **out,
                                                                const SignalPreKeyBundle *obj);

SignalFfiError *signal_signed_pre_key_record_deserialize(SignalSignedPreKeyRecord **p,
                                                         const unsigned char *data,
                                                         size_t data_len);

SignalFfiError *signal_signed_pre_key_record_get_signature(const unsigned char **out,
                                                           size_t *out_len,
                                                           const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_serialize(const unsigned char **out,
                                                       size_t *out_len,
                                                       const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_get_id(uint32_t *out,
                                                    const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_get_timestamp(uint64_t *out,
                                                           const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_get_public_key(SignalPublicKey **out,
                                                            const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_get_private_key(SignalPrivateKey **out,
                                                             const SignalSignedPreKeyRecord *obj);

SignalFfiError *signal_signed_pre_key_record_new(SignalSignedPreKeyRecord **out,
                                                 uint32_t id,
                                                 uint64_t timestamp,
                                                 const SignalPublicKey *pub_key,
                                                 const SignalPrivateKey *priv_key,
                                                 const unsigned char *signature,
                                                 size_t signature_len);

SignalFfiError *signal_pre_key_record_deserialize(SignalPreKeyRecord **p,
                                                  const unsigned char *data,
                                                  size_t data_len);

SignalFfiError *signal_pre_key_record_serialize(const unsigned char **out,
                                                size_t *out_len,
                                                const SignalPreKeyRecord *obj);

SignalFfiError *signal_pre_key_record_get_id(uint32_t *out, const SignalPreKeyRecord *obj);

SignalFfiError *signal_pre_key_record_get_public_key(SignalPublicKey **out,
                                                     const SignalPreKeyRecord *obj);

SignalFfiError *signal_pre_key_record_get_private_key(SignalPrivateKey **out,
                                                      const SignalPreKeyRecord *obj);

SignalFfiError *signal_pre_key_record_new(SignalPreKeyRecord **out,
                                          uint32_t id,
                                          const SignalPublicKey *pub_key,
                                          const SignalPrivateKey *priv_key);

SignalFfiError *signal_sender_key_record_deserialize(SignalSenderKeyRecord **p,
                                                     const unsigned char *data,
                                                     size_t data_len);

SignalFfiError *signal_sender_key_record_serialize(const unsigned char **out,
                                                   size_t *out_len,
                                                   const SignalSenderKeyRecord *obj);

SignalFfiError *signal_sender_key_record_new_fresh(SignalSenderKeyRecord **out);

SignalFfiError *signal_server_certificate_deserialize(SignalServerCertificate **p,
                                                      const unsigned char *data,
                                                      size_t data_len);

SignalFfiError *signal_server_certificate_get_serialized(const unsigned char **out,
                                                         size_t *out_len,
                                                         const SignalServerCertificate *obj);

SignalFfiError *signal_server_certificate_get_certificate(const unsigned char **out,
                                                          size_t *out_len,
                                                          const SignalServerCertificate *obj);

SignalFfiError *signal_server_certificate_get_signature(const unsigned char **out,
                                                        size_t *out_len,
                                                        const SignalServerCertificate *obj);

SignalFfiError *signal_server_certificate_get_key_id(uint32_t *out,
                                                     const SignalServerCertificate *obj);

SignalFfiError *signal_server_certificate_get_key(SignalPublicKey **out,
                                                  const SignalServerCertificate *obj);

SignalFfiError *signal_server_certificate_new(SignalServerCertificate **out,
                                              uint32_t key_id,
                                              const SignalPublicKey *server_key,
                                              const SignalPrivateKey *trust_root);

SignalFfiError *signal_sender_certificate_deserialize(SignalSenderCertificate **p,
                                                      const unsigned char *data,
                                                      size_t data_len);

SignalFfiError *signal_sender_certificate_get_serialized(const unsigned char **out,
                                                         size_t *out_len,
                                                         const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_certificate(const unsigned char **out,
                                                          size_t *out_len,
                                                          const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_signature(const unsigned char **out,
                                                        size_t *out_len,
                                                        const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_sender_uuid(const char **out,
                                                          const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_sender_e164(const char **out,
                                                          const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_expiration(uint64_t *out,
                                                         const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_device_id(uint32_t *out,
                                                        const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_get_key(SignalPublicKey **out,
                                                  const SignalSenderCertificate *obj);

SignalFfiError *signal_sender_certificate_validate(bool *out,
                                                   const SignalSenderCertificate *cert,
                                                   const SignalPublicKey *key,
                                                   uint64_t time);

SignalFfiError *signal_sender_certificate_get_server_certificate(SignalServerCertificate **out,
                                                                 const SignalSenderCertificate *cert);

SignalFfiError *signal_sender_certificate_new(SignalSenderCertificate **out,
                                              const char *sender_uuid,
                                              const char *sender_e164,
                                              uint32_t sender_device_id,
                                              const SignalPublicKey *sender_key,
                                              uint64_t expiration,
                                              const SignalServerCertificate *signer_cert,
                                              const SignalPrivateKey *signer_key);

SignalFfiError *signal_unidentified_sender_message_content_deserialize(SignalUnidentifiedSenderMessageContent **p,
                                                                       const unsigned char *data,
                                                                       size_t data_len);

SignalFfiError *signal_unidentified_sender_message_content_serialize(const unsigned char **out,
                                                                     size_t *out_len,
                                                                     const SignalUnidentifiedSenderMessageContent *obj);

SignalFfiError *signal_unidentified_sender_message_content_get_contents(const unsigned char **out,
                                                                        size_t *out_len,
                                                                        const SignalUnidentifiedSenderMessageContent *obj);

SignalFfiError *signal_unidentified_sender_message_content_get_sender_cert(SignalSenderCertificate **out,
                                                                           const SignalUnidentifiedSenderMessageContent *m);

SignalFfiError *signal_unidentified_sender_message_content_get_group_id(const unsigned char **out,
                                                                        size_t *out_len,
                                                                        const SignalUnidentifiedSenderMessageContent *m);

SignalFfiError *signal_unidentified_sender_message_content_get_msg_type(uint8_t *out,
                                                                        const SignalUnidentifiedSenderMessageContent *m);

SignalFfiError *signal_unidentified_sender_message_content_get_content_hint(uint32_t *out,
                                                                            const SignalUnidentifiedSenderMessageContent *m);

SignalFfiError *signal_unidentified_sender_message_content_new(SignalUnidentifiedSenderMessageContent **out,
                                                               const SignalCiphertextMessage *message,
                                                               const SignalSenderCertificate *sender,
                                                               uint32_t content_hint,
                                                               const unsigned char *group_id,
                                                               size_t group_id_len);

SignalFfiError *signal_ciphertext_message_type(uint8_t *out, const SignalCiphertextMessage *msg);

SignalFfiError *signal_ciphertext_message_serialize(const unsigned char **out,
                                                    size_t *out_len,
                                                    const SignalCiphertextMessage *obj);

SignalFfiError *signal_session_record_archive_current_state(SignalSessionRecord *session_record);

SignalFfiError *signal_session_record_has_current_state(bool *out, const SignalSessionRecord *obj);

SignalFfiError *signal_session_record_deserialize(SignalSessionRecord **p,
                                                  const unsigned char *data,
                                                  size_t data_len);

SignalFfiError *signal_session_record_serialize(const unsigned char **out,
                                                size_t *out_len,
                                                const SignalSessionRecord *obj);

SignalFfiError *signal_session_record_get_local_registration_id(uint32_t *out,
                                                                const SignalSessionRecord *obj);

SignalFfiError *signal_session_record_get_remote_registration_id(uint32_t *out,
                                                                 const SignalSessionRecord *obj);

SignalFfiError *signal_process_prekey_bundle(const SignalPreKeyBundle *bundle,
                                             const SignalProtocolAddress *protocol_address,
                                             const SignalSessionStore *session_store,
                                             const SignalIdentityKeyStore *identity_key_store,
                                             void *ctx);

SignalFfiError *signal_encrypt_message(SignalCiphertextMessage **out,
                                       const unsigned char *ptext,
                                       size_t ptext_len,
                                       const SignalProtocolAddress *protocol_address,
                                       const SignalSessionStore *session_store,
                                       const SignalIdentityKeyStore *identity_key_store,
                                       void *ctx);

SignalFfiError *signal_decrypt_message(const unsigned char **out,
                                       size_t *out_len,
                                       const SignalMessage *message,
                                       const SignalProtocolAddress *protocol_address,
                                       const SignalSessionStore *session_store,
                                       const SignalIdentityKeyStore *identity_key_store,
                                       void *ctx);

SignalFfiError *signal_decrypt_pre_key_message(const unsigned char **out,
                                               size_t *out_len,
                                               const SignalPreKeySignalMessage *message,
                                               const SignalProtocolAddress *protocol_address,
                                               const SignalSessionStore *session_store,
                                               const SignalIdentityKeyStore *identity_key_store,
                                               const SignalPreKeyStore *prekey_store,
                                               const SignalSignedPreKeyStore *signed_prekey_store,
                                               void *ctx);

SignalFfiError *signal_sealed_session_cipher_encrypt(const unsigned char **out,
                                                     size_t *out_len,
                                                     const SignalProtocolAddress *destination,
                                                     const SignalUnidentifiedSenderMessageContent *content,
                                                     const SignalIdentityKeyStore *identity_key_store,
                                                     void *ctx);

SignalFfiError *signal_sealed_sender_multi_recipient_encrypt(const unsigned char **out,
                                                             size_t *out_len,
                                                             const SignalProtocolAddress *const *recipients,
                                                             size_t recipients_len,
                                                             const SignalUnidentifiedSenderMessageContent *content,
                                                             const SignalIdentityKeyStore *identity_key_store,
                                                             void *ctx);

SignalFfiError *signal_sealed_sender_multi_recipient_message_for_single_recipient(const unsigned char **out,
                                                                                  size_t *out_len,
                                                                                  const unsigned char *encoded_multi_recipient_message,
                                                                                  size_t encoded_multi_recipient_message_len);

SignalFfiError *signal_sealed_session_cipher_decrypt_to_usmc(SignalUnidentifiedSenderMessageContent **out,
                                                             const unsigned char *ctext,
                                                             size_t ctext_len,
                                                             const SignalIdentityKeyStore *identity_store,
                                                             void *ctx);

SignalFfiError *signal_sender_key_distribution_message_create(SignalSenderKeyDistributionMessage **out,
                                                              const SignalProtocolAddress *sender,
                                                              const uint8_t (*distribution_id)[16],
                                                              const SignalSenderKeyStore *store,
                                                              void *ctx);

SignalFfiError *signal_process_sender_key_distribution_message(const SignalProtocolAddress *sender,
                                                               const SignalSenderKeyDistributionMessage *sender_key_distribution_message,
                                                               const SignalSenderKeyStore *store,
                                                               void *ctx);

SignalFfiError *signal_group_encrypt_message(SignalCiphertextMessage **out,
                                             const SignalProtocolAddress *sender,
                                             const uint8_t (*distribution_id)[16],
                                             const unsigned char *message,
                                             size_t message_len,
                                             const SignalSenderKeyStore *store,
                                             void *ctx);

SignalFfiError *signal_group_decrypt_message(const unsigned char **out,
                                             size_t *out_len,
                                             const SignalProtocolAddress *sender,
                                             const unsigned char *message,
                                             size_t message_len,
                                             const SignalSenderKeyStore *store,
                                             void *ctx);

SignalFfiError *signal_device_transfer_generate_private_key(const unsigned char **out,
                                                            size_t *out_len);

SignalFfiError *signal_device_transfer_generate_certificate(const unsigned char **out,
                                                            size_t *out_len,
                                                            const unsigned char *private_key,
                                                            size_t private_key_len,
                                                            const char *name,
                                                            uint32_t days_to_expire);

#endif /* SIGNAL_FFI_H_ */

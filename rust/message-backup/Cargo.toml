#
# Copyright (C) 2023 Signal Messenger, LLC.
# SPDX-License-Identifier: AGPL-3.0-only
#
[package]
name = "libsignal-message-backup"
version = "0.1.0"
edition = "2024"
rust-version = "1.85"
authors.workspace = true
license.workspace = true

[lints]
workspace = true

[features]
# Enables code to allow conversion of backups to and from JSON.
json = ["dep:serde_json", "dep:protobuf-json-mapping"]
scramble = ["dep:rand"]
cli = ["dep:clap", "dep:clap-stdin", "dep:env_logger"]
test-util = []

[[bin]]
name = "validator"
required-features = ["cli"]

[[example]]
name = "json_to_binproto"
required-features = ["json"]

[[example]]
name = "binproto_to_json"
required-features = ["json"]

[[example]]
name = "scramble"
required-features = ["scramble"]

[[bench]]
name = "validation"
harness = false
required-features = ["test-util"]

[dependencies]
libsignal-message-backup-macros = { path = "macros" }

libsignal-account-keys = { workspace = true }
libsignal-core = { workspace = true }
libsignal-protocol = { workspace = true }
libsignal-svrb = { workspace = true }
signal-crypto = { workspace = true }
usernames = { workspace = true }
zkcredential = { workspace = true, features = ["rayon"] }
zkgroup = { workspace = true }

aes = { workspace = true }
arrayvec = { workspace = true }
assert_matches = { workspace = true }
async-compression = { workspace = true, features = ["futures-io", "gzip"] }
async-trait = { workspace = true }
cbc = { workspace = true }
clap = { workspace = true, features = ["derive"], optional = true }
clap-stdin = { workspace = true, optional = true }
derive-where = { workspace = true }
derive_more = { workspace = true, features = ["from", "into_iterator", "try_from"] }
displaydoc = { workspace = true }
env_logger = { workspace = true, optional = true }
futures = { workspace = true }
hex = { workspace = true, features = ["serde"] }
hkdf = { workspace = true }
hmac = { workspace = true }
intmap = { workspace = true }
itertools = { workspace = true }
log = { workspace = true }
macro_rules_attribute = { workspace = true }
mediasan-common = { workspace = true }
prost = { workspace = true }
protobuf = { workspace = true }
protobuf-json-mapping = { workspace = true, optional = true }
rand = { workspace = true, optional = true }
serde = { workspace = true, features = ["derive", "rc"] }
serde_json = { workspace = true, optional = true, features = ["preserve_order"] }
serde_with = { workspace = true, features = ["hex"] }
sha2 = { workspace = true }
static_assertions = { workspace = true }
strum = { workspace = true, features = ["derive"] }
subtle = { workspace = true }
thiserror = { workspace = true }
unicode-segmentation = { workspace = true }
uuid = { workspace = true, features = ["serde"] }
visibility = { workspace = true }

[dev-dependencies]
libsignal-message-backup = { path = "./", features = ["cli", "json", "scramble", "test-util"] }

libsignal-cli-utils = { workspace = true }
signal-crypto = { workspace = true }

assert_cmd = { workspace = true }
const-str = { workspace = true }
criterion = { workspace = true }
dir-test = { workspace = true }
futures = { workspace = true, features = ["executor"] }
json5 = { workspace = true }
nonzero_ext = { workspace = true }
once_cell = { workspace = true }
pretty_assertions = { workspace = true }
test-case = { workspace = true }
test-log = { workspace = true }
uuid = { workspace = true, features = ["v4"] }

[build-dependencies]
protobuf = { workspace = true }
protobuf-codegen = { workspace = true }

# Enable sha2 asm for local builds (there is a similar block in libsignal-bridge-types).
[target.'cfg(not(any(windows, target_arch = "x86")))'.dev-dependencies]
# sha2's asm implementation uses standalone .S files that aren't compiled correctly on Windows,
# and aren't linked correctly on x86 Android.
# This will be fixed in sha2 0.11, which also removes the "asm" feature and turns it on by default.
# So when sha2 0.11 is released, this section will go away.
sha2 = { workspace = true, features = ["asm"] }

# Prefer the system zlib for Android.
# We'd probably prefer to use this everywhere, but some of our tests depend on exact output.
[target.'cfg(target_os = "android")'.dev-dependencies]
flate2 = { workspace = true, features = ["zlib"] }
